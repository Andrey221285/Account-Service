type: edu
files:
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/account/component/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.component;

    import account.repository.AuditRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint  implements AuthenticationEntryPoint {
        @Autowired
        AuditRepository auditRepository;


        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/dto/ChangePasswordDto.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.stereotype.Component;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Size;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public
    class ChangePasswordDto {

        @NotBlank
       // @Size(min = 12,message = "The password length must be at leat 12 chars!")
        @JsonProperty("new_password")
        private String password;
    }
  learner_created: true
- name: src/account/service/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.UserDetailsImpl;
    import account.entity.Audit;
    import account.entity.User;
    import account.repository.AuditRepository;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    public class UserDetailsServiceImpl  implements UserDetailsService {
        @Autowired
        UserRepository userRepository;
        @Autowired
        AuditRepository auditRepository;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByEmailIgnoreCase(username);
            if (user == null){
    //            Audit audit = new Audit();
    //            audit.sert

                throw new UsernameNotFoundException("Not found: " + username);
            }
            return new UserDetailsImpl(user);
        }
    }
  learner_created: true
- name: src/account/component/AuthenticationSuccessEventListener.java
  visible: true
  text: |
    package account.component;

    import account.entity.User;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    @Component
    public class AuthenticationSuccessEventListener implements ApplicationListener<AuthenticationSuccessEvent> {
        @Autowired
        private UserRepository userRepository;

        @Override
        public void onApplicationEvent(final AuthenticationSuccessEvent e) {
            User u = userRepository.findByEmailIgnoreCase((e.getAuthentication().getName()));
            if (u != null && u.getLogin_failure() > 0) {
                u.unlockUser();
                userRepository.save(u);
            } else {
                //anonymus
            }
        }
    }
  learner_created: true
- name: src/account/entity/Audit.java
  visible: true
  text: |
    package account.entity;

    import com.fasterxml.jackson.annotation.JsonAlias;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import java.time.LocalDateTime;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity(name = "audit")
    public class Audit {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column
        private LocalDateTime date;
        @Column
        private String action;
        @Column
        private String subject = "Anonymous";
        @Column
        private String object;
        @Column
        private String path;

        @PrePersist
        public void onPrepersist() {
            date = LocalDateTime.now();
        }

        @PreUpdate
        public void onPreUpdate() {
            date = LocalDateTime.now();
        }

    }
  learner_created: true
- name: src/account/entity/User.java
  visible: true
  text: |
    package account.entity;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.hibernate.type.descriptor.sql.LongVarcharTypeDescriptor;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.Set;
    import java.util.TreeSet;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity(name = "user")
    public class User {

        //@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        @Column
        @NotBlank
        private String name;

        @Column
        @NotBlank
        private String lastname;

        @Column
        @NotBlank
        @Email
        @Size(min = 8)
        @Pattern(regexp = ".+@acme.com")
        private String email;

        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column
        @NotBlank
        //@Size(min = 12,message = "The password length must be at leat 12 chars!")
        private String password;

        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column
        private long login_failure = 0;

        @ManyToMany(fetch = FetchType.EAGER)
        //@JoinColumn(name="group_id", nullable=false)
        private Set<Group> roles;

        public void loginFailureInc(){
            login_failure++;
        }

        public void unlockUser(){
            login_failure = 0;
        }
        public void lockUsuer(){
            login_failure = 5;
        }
        public boolean nonLocked(){
            return login_failure < 5;
        }
    }
  learner_created: true
- name: src/account/exceptions/UserExistException.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException{
    }
  learner_created: true
- name: src/account/exceptions/UserNotFoundException.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "User not found!")
    public class UserNotFoundException extends RuntimeException {
    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |
    package account.repository;

    import account.entity.Payment;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Component;
    import org.springframework.stereotype.Repository;

    import java.util.List;

    @Repository
    public interface PaymentRepository extends CrudRepository<Payment, Long> {

        Payment findByEmployeeIgnoreCaseAndPeriod(String emplee, String period);
        List<Payment> findByEmployeeIgnoreCase(String emplee);

    }
  learner_created: true
- name: src/account/entity/Group.java
  visible: true
  text: |
    package account.entity;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import java.util.Set;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity
    @Table(name = "principle_groups")
    public class Group {

        public Group(String name) {
            this.name = name;
        }

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column(unique = true, nullable = false)
        private String name;

    //    @OneToMany
    //    @JoinColumn(name="group_id", nullable=false)
    //    private Set<User> users;

    }
  learner_created: true
- name: src/account/component/AuthenticationFailureListener.java
  visible: true
  text: |
    package account.component;

    import account.AUDIT_EVENTS;
    import account.entity.Audit;
    import account.entity.User;
    import account.repository.AuditRepository;
    import account.repository.UserRepository;
    import org.apache.catalina.core.ApplicationContext;
    import org.apache.tomcat.util.net.openssl.ciphers.Authentication;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
    import org.springframework.stereotype.Component;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.context.request.ServletRequestAttributes;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class AuthenticationFailureListener implements ApplicationListener<AuthenticationFailureBadCredentialsEvent> {
        @Autowired
        private UserRepository userRepository;
        @Autowired
        private AuditRepository auditRepository;
        @Autowired
        private HttpServletRequest request;



        @Override
        public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent e) {
           String path = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getRequestURI();
            final String xfHeader = request.getHeader("X-Forwarded-For");
    //        if (xfHeader == null) {
    //            String r =request.getContextPath();
    //            System.out.println(r);
    //        } else {
    //            String r =xfHeader.split(",")[0];
    //            System.out.println(r);
    //        }
           User u = userRepository.findByEmailIgnoreCase((String) e.getAuthentication().getPrincipal());
            Audit audit = new Audit();
            audit.setAction(AUDIT_EVENTS.LOGIN_FAILED.name());
            audit.setObject(path);
            audit.setSubject((String) e.getAuthentication().getPrincipal());
            audit.setPath(path);
            auditRepository.save(audit);

           if (u != null){
               boolean isAdmin = false;
               for(var roles : u.getRoles()){
                   if (roles.getName().equals("ROLE_ADMINISTRATOR")) {
                       isAdmin = true;
                       break;
                   }
               }
               if (!isAdmin){
                   u.loginFailureInc();
               }

               userRepository.save(u);
               if (u.getLogin_failure() > 4){
                   Audit lock = new Audit();
                   lock.setAction(AUDIT_EVENTS.LOCK_USER.name());
                   lock.setObject("Lock user "+u.getEmail());
                   lock.setSubject(u.getEmail());
                   lock.setPath(path);

                   Audit brute = new Audit();
                   brute.setAction(AUDIT_EVENTS.BRUTE_FORCE.name());
                   brute.setObject(path);
                   brute.setSubject(u.getEmail());
                   brute.setPath(path);

                   auditRepository.save(brute);
                   auditRepository.save(lock);
               }
           } else {
               //anonymus
           }
        }
    }
  learner_created: true
- name: src/account/WebSecurityConfigurerImpl.java
  visible: true
  text: |
    package account;

    import account.component.AuthenticationFailureListener;
    import account.component.RestAuthenticationEntryPoint;
    import account.repository.AuditRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @EnableWebSecurity
    public class WebSecurityConfigurerImpl extends WebSecurityConfigurerAdapter {

        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;


        @Autowired
        UserDetailsService userDetailsService;

        @Autowired
        AuditRepository auditRepository;

        @Autowired
        CustomAuthenticationFailureHandler customAuthenticationFailureHandler;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userDetailsService) // user store 1
                    .passwordEncoder(getEncoder());

    //        auth
    //                .inMemoryAuthentication() // user store 2
    //                .withUser("Admin").password("hardcoded").roles("USER")
    //                .and().passwordEncoder(NoOpPasswordEncoder.getInstance());
        }

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .mvcMatchers("/api/signup").permitAll()
                    .mvcMatchers("api/auth/changepass").authenticated()
                    .mvcMatchers("api/admin/user", "api/admin/user/**").hasRole("ADMINISTRATOR")
                    .mvcMatchers("api/acct/payments").hasRole("ACCOUNTANT")
                    .mvcMatchers("api/empl/payment").hasAnyRole("ACCOUNTANT", "USER")
                    .mvcMatchers("api/security/events").hasAnyRole("AUDITOR")
                    // other matchers
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                    .and()
                    .formLogin().failureHandler(customAuthenticationFailureHandler)
                    .and()
                    .exceptionHandling().accessDeniedHandler(new CustomAccessDeniedHandler(auditRepository))
            ;
        }


        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder(13);
        }
    }
  learner_created: true
- name: src/account/controller/AccauntRestController.java
  visible: true
  text: |
    package account.controller;

    import account.AUDIT_EVENTS;
    import account.entity.Audit;
    import account.exceptions.UserExistException;
    import account.dto.ChangePasswordDto;
    import account.dto.PaymentResponseDto;
    import account.dto.UserDto;
    import account.entity.Group;
    import account.entity.Payment;
    import account.entity.User;
    import account.repository.AuditRepository;
    import account.repository.GroupRepository;
    import account.repository.PaymentRepository;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import javax.validation.ConstraintViolationException;
    import javax.validation.Valid;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.*;

    @RestController
    public class AccauntRestController {
        @Autowired
        UserRepository userRepository;
        @Autowired
        PaymentRepository paymentRepository;
        @Autowired
        GroupRepository groupRepository;
        @Autowired
        PasswordEncoder encoder;
        @Autowired
        AuditRepository auditRepository;

        private HashSet<String> hackedPassword = new HashSet<>(Arrays.asList("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"));

        @ExceptionHandler({ConstraintViolationException.class})
        @PostMapping("/api/auth/signup")
        public ResponseEntity<?> signup(@Valid @RequestBody User user) {
            if (user.getPassword().length() < 12) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password length must be 12 chars minimum!");
            }


            if (hackedPassword.contains(user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }


            User userOld = userRepository.findByEmailIgnoreCase(user.getEmail());
            if (userOld == null) {
                user.setPassword(encoder.encode(user.getPassword()));
                Set<Group> g = new HashSet<>();
                if(userRepository.count()==0){
                    g.add( groupRepository.findByName("ROLE_ADMINISTRATOR"));
                } else {
                    g.add( groupRepository.findByName("ROLE_USER"));
                }
                user.setRoles(g);
                userRepository.save(user);
                Audit audit = new Audit();
                audit.setAction(AUDIT_EVENTS.CREATE_USER.name());
                audit.setPath("/api/auth/signup");
                audit.setSubject("Anonymous");
                audit.setObject(user.getEmail().toLowerCase());
                auditRepository.save(audit);


                return new ResponseEntity<>(new UserDto(user), HttpStatus.OK);
            }

            throw new UserExistException();
        }

        @GetMapping("api/empl/payment")
        public ResponseEntity<?> getPayment(@AuthenticationPrincipal UserDetails details,@RequestParam(required = false) String period) {
            if (details != null) {
                User user = userRepository.findByEmailIgnoreCase(details.getUsername());

                if (period == null){
                    List<PaymentResponseDto> list = new ArrayList<>();
                    List<Payment> payments = paymentRepository.findByEmployeeIgnoreCase(user.getEmail());
                    for (Payment p : payments){
                        list.add(createPaymentMessage(user, p));
                    }
                    list.sort(Comparator.comparing(PaymentResponseDto::periodYearMonth).reversed());

                    return new ResponseEntity<>(list, HttpStatus.OK);
                } else {
                    Payment p = paymentRepository.findByEmployeeIgnoreCaseAndPeriod(user.getEmail(),period);
                    if (p!=null){
                        return new ResponseEntity<>(createPaymentMessage(user, p), HttpStatus.OK);
                    }else {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "указан неверный период");
                    }
                }
            }

            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
        }


        private PaymentResponseDto createPaymentMessage(User user, Payment p) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth ym = YearMonth.parse(p.getPeriod(), formatter);
            return new PaymentResponseDto(user.getName(),user.getLastname(),ym,salaryToString(p.getSalary()));
        }

        private static String salaryToString(long salary){
            long dollar = salary/100;
            long cent = salary%100;
            String s = dollar + " dollar(s) " + cent + " cent(s)";
            return s;

        }

        @PostMapping("api/auth/changepass")
        public ResponseEntity<?> changePassword(@AuthenticationPrincipal UserDetails details, @Valid @RequestBody ChangePasswordDto changePasswordDto) {
            if (details != null) {
                if (changePasswordDto.getPassword().length() < 12) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password length must be 12 chars minimum!");
                }
                System.out.println("password = " + changePasswordDto.getPassword());
                if (hackedPassword.contains(changePasswordDto.getPassword())) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
                }
                User user = userRepository.findByEmailIgnoreCase(details.getUsername());
                if (encoder.matches(changePasswordDto.getPassword(), user.getPassword())) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");
                }
                user.setPassword(encoder.encode(changePasswordDto.getPassword()));
                userRepository.save(user);
                Audit audit = new Audit();
                audit.setAction(AUDIT_EVENTS.CHANGE_PASSWORD.name());
                audit.setObject(user.getEmail().toLowerCase());
                audit.setSubject(user.getEmail().toLowerCase());
                audit.setPath("api/auth/changepass");
                auditRepository.save(audit);


                HashMap<String, String> map = new HashMap<>();
                map.put("email", user.getEmail().toLowerCase());
                map.put("status", "The password has been updated successfully");

                return new ResponseEntity<>(map, HttpStatus.OK);
            }

            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
        }

        @PostMapping("api/acct/payments")
        @Transactional
        public ResponseEntity<?> addPayments(@RequestBody List<Payment> payments) {
            saveAllPayments(payments);
            HashMap<String, String> m = new HashMap<>();
            m.put("status", "Added successfully!");
            return new ResponseEntity<>(m, HttpStatus.OK);
        }


        public void saveAllPayments(List<Payment> payments) {
    //        paymentRepository.saveAll(payments);

            for (var p : payments) {
                if (p.getSalary() <=0){
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "отрицательная зарплата");
                }
                YearMonth ym = null;
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-yyyy");
                     ym = YearMonth.parse(p.getPeriod(),formatter);
                } catch (Exception e) {
                    //e.printStackTrace();
                }

                if (ym == null){
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "неправильная дата");
                }

                User u = userRepository.findByEmailIgnoreCase(p.getEmployee());
                if (u != null) {
                    Payment pp = paymentRepository.findByEmployeeIgnoreCaseAndPeriod(p.getEmployee(), p.getPeriod());
                    if (pp!=null){
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "ведомость уже существует");
                    }
                    p.setUser(u);
                    paymentRepository.save(p);
                } else {
    //                throw new RuntimeException();
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "нету юзера");
                }
            }
        }

        @PutMapping("api/acct/payments")
        public ResponseEntity<?> updatePayments(@RequestBody Payment newPayment) {
            if (newPayment.getSalary() <=0){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "отрицательная зарплата");
            }

            User u = userRepository.findByEmailIgnoreCase(newPayment.getEmployee());
            if (u != null) {
                Payment oldPayment = paymentRepository.findByEmployeeIgnoreCaseAndPeriod(newPayment.getEmployee(), newPayment.getPeriod());
                if (oldPayment!=null){
                    oldPayment.setSalary(newPayment.getSalary());
                    paymentRepository.save(oldPayment);

                } else {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Error!");
                }
            } else {
    //                throw new RuntimeException();
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "нету юзера");
            }
            HashMap<String, String> m = new HashMap<>();
            m.put("status", "Updated successfully!");
            return new ResponseEntity<>(m, HttpStatus.OK);
        }

        @GetMapping("api/security/events")
        public ResponseEntity<?> getAuditEvents(){
            return new ResponseEntity<>(auditRepository.findAll(),HttpStatus.OK);
        }


    }
  learner_created: true
- name: src/account/dto/AdminUpdateUserDto.java
  visible: true
  text: |
    package account.dto;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class AdminUpdateUserDto {
        String user;
        String role;
        String operation;




    }
  learner_created: true
- name: src/account/repository/AuditRepository.java
  visible: true
  text: |
    package account.repository;

    import account.entity.Audit;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface AuditRepository extends CrudRepository<Audit, Long> {
    }
  learner_created: true
- name: src/account/repository/UserRepository.java
  visible: true
  text: |
    package account.repository;

    import account.entity.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Component;
    import org.springframework.stereotype.Repository;


    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        User findByEmailIgnoreCase(String name);


    }
  learner_created: true
- name: src/account/UserDetailsImpl.java
  visible: true
  text: |
    package account;

    import account.entity.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {
        private User user;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            this.user = user;
            rolesAndAuthorities = new ArrayList<>();
            user.getRoles().forEach(t -> rolesAndAuthorities.add(new SimpleGrantedAuthority(t.getName())));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return user.getPassword();
        }

        @Override
        public String getUsername() {
            return user.getEmail();
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return user.nonLocked();
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/dto/PaymentResponseDto.java
  visible: true
  text: |
    package account.dto;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.Locale;


    public class PaymentResponseDto {
        private String name;
        private String lastname;
        private YearMonth period;
        private String salary;

        static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM-yyyy", Locale.US);

        public PaymentResponseDto(String name, String lastname, YearMonth period, String salary) {
            this.name = name;
            this.lastname = lastname;
            this.period = period;
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public String getLastname() {
            return lastname;
        }

        public String getPeriod() {
            return  period.format(formatter);
        }

        public YearMonth periodYearMonth() {
            return  period;
        }

        public String getSalary() {
            return salary;
        }
    }
  learner_created: true
- name: src/account/entity/Payment.java
  visible: true
  text: |
    package account.entity;


    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity(name = "payment")
    public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column
        private String employee;

        @Column
        private String  period;

    //    @Min(value = 0)
        @Column
        private Long salary;

        @ManyToOne
        @JoinColumn(name="user_id", nullable=false)
        private User user;
    }
  learner_created: true
- name: src/account/dto/AdminChangeAccessDto.java
  visible: true
  text: |
    package account.dto;


    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.NotEmpty;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class AdminChangeAccessDto {

        @NotEmpty
        private String user;
        private String operation;

    }
  learner_created: true
- name: src/account/repository/GroupRepository.java
  visible: true
  text: |
    package account.repository;


    import account.entity.Group;
    import account.entity.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Component;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface GroupRepository  extends CrudRepository<Group, Long> {

        public Group findByName(String name);
    }
  learner_created: true
- name: src/account/controller/AdminController.java
  visible: true
  text: |
    package account.controller;

    import account.AUDIT_EVENTS;
    import account.dto.AdminChangeAccessDto;
    import account.entity.Audit;
    import account.exceptions.UserNotFoundException;
    import account.dto.AdminUpdateUserDto;
    import account.dto.UserDto;
    import account.entity.Group;
    import account.entity.User;
    import account.repository.AuditRepository;
    import account.repository.GroupRepository;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.Comparator;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.TreeSet;

    @RestController
    public class AdminController {
        @Autowired
        private UserRepository userRepository;

        @Autowired
        private GroupRepository groupRepository;
        @Autowired
        private AuditRepository auditRepository;

        @GetMapping("api/admin/user")
        public ResponseEntity<?> getAllUsers(@AuthenticationPrincipal UserDetails details) {
            var set = userRepository.findAll();
            TreeSet<UserDto> userDtos = new TreeSet<>(Comparator.comparing(t -> t.getId()));
            set.forEach(t -> userDtos.add(new UserDto(t)));

            return new ResponseEntity<>(userDtos, HttpStatus.OK);
        }

        @DeleteMapping(value = {"api/admin/user", "api/admin/user/{userEmail}"})
        public ResponseEntity<?> deleteUser(@AuthenticationPrincipal UserDetails details, @PathVariable String userEmail) {
            User user = userRepository.findByEmailIgnoreCase(userEmail);
            if (user != null) {
                if (user.getRoles().contains(groupRepository.findByName("ROLE_ADMINISTRATOR"))) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
                }

                userRepository.delete(user);

                Audit audit = new Audit();
                audit.setAction(AUDIT_EVENTS.DELETE_USER.name());
                audit.setSubject(details.getUsername().toLowerCase());
                audit.setObject(user.getEmail().toLowerCase());
                audit.setPath("api/admin/user");
                auditRepository.save(audit);

                Map<String, String> map = new HashMap<>();
                map.put("user", user.getEmail().toLowerCase());
                map.put("status", "Deleted successfully!");
                return new ResponseEntity<>(map, HttpStatus.OK);
            }
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
        }

        @PutMapping("api/admin/user/role")
        public ResponseEntity<?> updateUserRole(@AuthenticationPrincipal UserDetails details, @RequestBody AdminUpdateUserDto updateUserDto) {
            User user = userRepository.findByEmailIgnoreCase(updateUserDto.getUser());
            String operation = updateUserDto.getOperation();
            if (user != null) {
                Group group = groupRepository.findByName("ROLE_" + updateUserDto.getRole());
                if (group == null) {
                    throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
                }

                if (operation.equals("GRANT")) {
                    boolean isAdmin = false;
                    for (var role : user.getRoles()) {
                        if (role.getName().equals("ROLE_ADMINISTRATOR")) {
                            isAdmin = true;
                            break;
                        }
                    }
                    if (!isAdmin && group.getName().equals("ROLE_ADMINISTRATOR")) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
                    }
                    if (isAdmin && (group.getName().equals("ROLE_USER")
                            || group.getName().equals("ROLE_ACCOUNTANT")
                            || group.getName().equals("ROLE_AUDITOR"))) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
                    }



                    user.getRoles().add(group);
                    userRepository.save(user);
                    Audit audit = new Audit();
                    audit.setAction(AUDIT_EVENTS.GRANT_ROLE.name());
                    audit.setSubject(details.getUsername().toLowerCase());
                    audit.setObject("Grant role " + updateUserDto.getRole() +" to " +user.getEmail().toLowerCase());
                    audit.setPath("api/admin/user/role");
                    auditRepository.save(audit);

                    return new ResponseEntity<>(new UserDto(user), HttpStatus.OK);
                } else if (operation.equals("REMOVE")) {
                    if (group.getName().equals("ROLE_ADMINISTRATOR")) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
                    }
                    if (!user.getRoles().contains(group)) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");
                    }
                    if (user.getRoles().size() == 1) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user must have at least one role!");
                    }
                    user.getRoles().remove(group);
                    userRepository.save(user);
                    Audit audit = new Audit();
                    audit.setAction(AUDIT_EVENTS.REMOVE_ROLE.name());
                    audit.setSubject(details.getUsername().toLowerCase());
                    audit.setObject("Remove role " + updateUserDto.getRole() +" from " +user.getEmail().toLowerCase());
                    audit.setPath("api/admin/user/role");
                    auditRepository.save(audit);

                    return new ResponseEntity<>(new UserDto(user), HttpStatus.OK);
                } else {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "unknown operation:" + operation);
                }
            } else {
                throw new UserNotFoundException();
            }
        }

        @PutMapping("api/admin/user/access")
        public ResponseEntity<?> changeUserAccess(@AuthenticationPrincipal UserDetails details, @RequestBody @Valid AdminChangeAccessDto changeAccess) {
            User user = userRepository.findByEmailIgnoreCase(changeAccess.getUser());
            if (user != null) {
                Audit audit = new Audit();
                audit.setSubject(details.getUsername().toLowerCase());
                audit.setPath("api/admin/user/access");

                if (changeAccess.getOperation().equals("LOCK")) {
                    if (user.getRoles().contains(groupRepository.findByName("ROLE_ADMINISTRATOR"))) {
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't lock the ADMINISTRATOR!");
                    }
                    user.lockUsuer();
                    audit.setAction(AUDIT_EVENTS.LOCK_USER.name());
                    audit.setObject("Lock user " + user.getEmail().toLowerCase());

                } else if (changeAccess.getOperation().equals("UNLOCK")){
                    user.unlockUser();
                    audit.setAction(AUDIT_EVENTS.UNLOCK_USER.name());
                    audit.setObject("Unlock user " + user.getEmail().toLowerCase());
                }

                userRepository.save(user);

                auditRepository.save(audit);
                Map<String, String> map = new HashMap<>();

                map.put("status", "User " + user.getEmail().toLowerCase()
                        + " " + (changeAccess.getOperation().equals("LOCK") ? "locked!" : "unlocked!"));
                return new ResponseEntity<>(map, HttpStatus.OK);
            }

            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
        }

    }
  learner_created: true
- name: src/account/dto/UserDto.java
  visible: true
  text: |
    package account.dto;

    import account.entity.Group;
    import account.entity.User;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.Column;
    import javax.persistence.ManyToMany;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.Set;
    import java.util.TreeSet;

    public class UserDto {
        private Long id;
        private String name;
        private String lastname;
        private String email;
        private TreeSet<String> roles;

        public UserDto(User user) {
            this.id = user.getId();
            this.name = user.getName();
            this.lastname = user.getLastname();
            this.email = user.getEmail().toLowerCase();
            this.roles = new TreeSet<>();
            for (var roles : user.getRoles()){
                this.roles.add(roles.getName());
            }
        }

        public Long getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public String getLastname() {
            return lastname;
        }

        public String getEmail() {
            return email;
        }

        public TreeSet<String> getRoles() {
            return roles;
        }
    }
  learner_created: true
- name: src/account/component/DataLoader.java
  visible: true
  text: |
    package account.component;

    import account.entity.Group;
    import account.repository.GroupRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    public class DataLoader {

        private GroupRepository groupRepository;

        @Autowired
        public DataLoader(@Autowired GroupRepository groupRepository) {
            this.groupRepository = groupRepository;
            createRoles();
        }

        private void createRoles() {
            try {
                groupRepository.save(new Group("ROLE_ADMINISTRATOR"));
                groupRepository.save(new Group("ROLE_USER"));
                groupRepository.save(new Group("ROLE_ACCOUNTANT"));
                groupRepository.save(new Group("ROLE_AUDITOR"));
            } catch (Exception e) {

            }
        }
    }
  learner_created: true
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/account/AUDIT_EVENTS.java
  visible: true
  text: |
    package account;

    public enum AUDIT_EVENTS {
        CREATE_USER,
        CHANGE_PASSWORD,
        ACCESS_DENIED,
        LOGIN_FAILED,
        GRANT_ROLE,
        REMOVE_ROLE,
        LOCK_USER,
        UNLOCK_USER,
        DELETE_USER,
        BRUTE_FORCE
    }
  learner_created: true
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/CustomAccessDeniedHandler.java
  visible: true
  text: |
    package account;

    import account.entity.Audit;
    import account.repository.AuditRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.stereotype.Component;
    import org.springframework.web.server.ResponseStatusException;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    public class CustomAccessDeniedHandler implements AccessDeniedHandler {
        private AuditRepository auditRepository;

        public CustomAccessDeniedHandler(AuditRepository auditRepository) {
            this.auditRepository = auditRepository;
        }

        @Override
        public void handle(
                HttpServletRequest request,
                HttpServletResponse response,
                AccessDeniedException exc) throws IOException, ServletException {
            Authentication auth
                    = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null) {
                System.out.println("User: " + auth.getName()
                        + " attempted to access the protected URL: "
                        + request.getRequestURI());
                Audit audit = new Audit();
                audit.setAction(AUDIT_EVENTS.ACCESS_DENIED.name());
                audit.setSubject(auth.getName().toLowerCase());
                audit.setObject(request.getRequestURI());
                audit.setPath(request.getRequestURI());
                auditRepository.save(audit);
            }


            response.sendError(HttpStatus.FORBIDDEN.value(), "Access Denied!");
        }
    }
  learner_created: true
- name: src/account/CustomAuthenticationFailureHandler.java
  visible: true
  text: |
    package account;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class CustomAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {

        @Override
        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
                                            AuthenticationException exception) throws IOException, ServletException {
            String email = request.getParameter("email");
            String path = request.getContextPath();
            System.out.println(email);
            System.out.println(path);


        }
    }
  learner_created: true
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: src/resources/keystore/service.p12
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1092/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nCan&#39;t establish https connection!\n\nPlease\
    \ find below the output of your program during this failed test.\n\n---\n\nstdout:\n\
    .   ____          _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _\
    \ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\
    \\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__,\
    \ | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::    \
    \    (v2.3.1.RELEASE)\n\n2022-03-29 12:45:25.349  INFO 32 --- [    Test worker]\
    \ account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on WIN-V2VIIKH07VR with PID 32 (started by user in C:\\Users\\user\\IdeaProjects\\\
    grpc\\Account Service\\Account Service\\task)\n2022-03-29 12:45:25.352  INFO 32\
    \ --- [    Test worker] account.AccountServiceApplication        : No active profile\
    \ set, falling back to default profiles: default\n2022-03-29 12:45:26.340  INFO\
    \ 32 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-03-29 12:45:26.419  INFO\
    \ 32 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 69ms. Found 4 JPA repository interfaces.\n\
    2022-03-29 12:45:27.108  INFO 32 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-03-29 12:45:27.119  INFO\
    \ 32 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-03-29 12:45:27.120  INFO 32 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.36]\n2022-03-29 12:45:27.230\
    \  INFO 32 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring embedded WebApplicationContext\n2022-03-29 12:45:27.230  INFO 32 ---\
    \ [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext:\
    \ initialization completed in 1838 ms\n2022-03-29 12:45:27.423  INFO 32 --- [\
    \    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...\n\
    2022-03-29 12:45:27.620  INFO 32 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Start completed.\n2022-03-29 12:45:27.628  INFO 32 ---\
    \ [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available\
    \ at &#39;/h2&#39;. Database available at &#39;jdbc:h2:file:../service_db&#39;\n\
    2022-03-29 12:45:27.770  INFO 32 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-03-29\
    \ 12:45:27.866  INFO 32 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-03-29 12:45:27.921\
    \  WARN 32 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view\
    \ is enabled by default. Therefore, database queries may be performed during view\
    \ rendering. Explicitly configure spring.jpa.open-in-view to disable this warning\n\
    2022-03-29 12:45:28.008  INFO 32 --- [         task-1] org.hibernate.Version \
    \                   : HHH000412: Hibernate ORM core version 5.4.17.Final\n2022-03-29\
    \ 12:45:28.233  INFO 32 --- [         task-1] o.hibernate.annotations.common.Version\
    \   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2022-03-29 12:45:28.352\
    \  INFO 32 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400:\
    \ Using dialect: org.hibernate.dialect.H2Dialect\nHibernate: create table audit\
    \ (id bigint generated by default as identity, action varchar(255), date timestamp,\
    \ object varchar(255), path varchar(255), subject varchar(255), primary key (id))\n\
    Hibernate: create table payment (id bigint generated by default as identity, employee\
    \ varchar(255), period varchar(255), salary bigint, user_id bigint not null, primary\
    \ key (id))\nHibernate: create table principle_groups (id bigint generated by\
    \ default as identity, name varchar(255) not null, primary key (id))\nHibernate:\
    \ create table user (id bigint generated by default as identity, email varchar(255),\
    \ lastname varchar(255), login_failure bigint, name varchar(255), password varchar(255),\
    \ primary key (id))\nHibernate: create table user_roles (user_id bigint not null,\
    \ roles_id bigint not null, primary key (user_id, roles_id))\nHibernate: alter\
    \ table principle_groups drop constraint if exists UK_5978cxf729tp2l1wedsnjy7cc\n\
    Hibernate: alter table principle_groups add constraint UK_5978cxf729tp2l1wedsnjy7cc\
    \ unique (name)\nHibernate: alter table payment add constraint FK4spfnm9si9dowsatcqs5or42i\
    \ foreign key (user_id) references user\nHibernate: alter table user_roles add\
    \ constraint FK1tes5l53ii9ovn7y0xw2taaw2 foreign key (roles_id) references principle_groups\n\
    Hibernate: alter table user_roles add constraint FK55itppkw3i07do3h7qoclqd4k foreign\
    \ key (user_id) references user\n2022-03-29 12:45:29.183  INFO 32 --- [      \
    \   task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform\
    \ implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-03-29 12:45:29.191  INFO 32 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    Hibernate: insert into principle_groups (id, name) values (null, ?)\nHibernate:\
    \ insert into principle_groups (id, name) values (null, ?)\nHibernate: insert\
    \ into principle_groups (id, name) values (null, ?)\nHibernate: insert into principle_groups\
    \ (id, name) values (null, ?)\n2022-03-29 12:45:29.814  INFO 32 --- [    Test\
    \ worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath\
    \ base path &#39;/actuator&#39;\n2022-03-29 12:45:29.859  INFO 32 --- [    Test\
    \ worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any\
    \ request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7b764b8,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@f88836b,\
    \ org.springframework.security.web.header.HeaderWriterFilter@4fec74bf, org.springframework.security.web.authentication.logout.LogoutFilter@1dc7a42,\
    \ org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7eeaba50,\
    \ org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@60898ac7,\
    \ org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@7b1446aa,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1059546a,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@487597d4,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5cc750e5,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@d89bd05,\
    \ org.springframework.security.web.session.SessionManagementFilter@25c9dfe0, org.springframework.security.web.access.ExceptionTranslationFilter@73eb550,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@ab3e54e]\n\
    2022-03-29 12:45:30.065  INFO 32 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;\n2022-03-29\
    \ 12:45:30.066  INFO 32 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-03-29\
    \ 12:45:30.105  INFO 32 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-03-29 12:45:30.114  INFO 32 ---\
    \ [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication\
    \ in 5.128 seconds (JVM running for 5.869)\n2022-03-29 12:45:30.289  INFO 32 ---\
    \ [io-28852-exec-1] o.apache.coyote.http11.Http11Processor   : Error parsing HTTP\
    \ request header\n Note: further occurrences of HTTP request parsing errors will\
    \ be logged at DEBUG level.\n\njava.lang.IllegalArgumentException: Invalid character\
    \ found in method name [0x160x030x030x010x930x010x000x010x8f0x030x030xc90x100x8e+0x1150xf4K0xf8`ye0x870xdf0x0c0x810xdb0x880xb9K0xaaz0xe80xb0m0xd20xc90xd8d0x080x860xf5].\
    \ HTTP method names must be tokens\n\tat org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:418)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:260)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\
    \ ~[na:na]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\
    \ ~[na:na]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.lang.Thread.run(Thread.java:834)\
    \ ~[na:na]\n\njavax.net.ssl.SSLPeerUnverifiedException: peer not authenticated\n\
    Connection not found\n\nstderr:\njavax.net.ssl.SSLPeerUnverifiedException: peer\
    \ not authenticated\n\tat java.base/sun.security.ssl.SSLSessionImpl.getPeerCertificates(SSLSessionImpl.java:556)\n\
    \tat AccountServiceTest.getCertificates(AccountServiceTest.java:60)\n\tat AccountServiceTest.checkCertificateName(AccountServiceTest.java:44)\n\
    \tat AccountServiceTest.lambda$new$0(AccountServiceTest.java:84)\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$null$2(DynamicTesting.java:289)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$null$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.test(SpringApplicationRunner.java:43)\n\
    \tat org.hyperskill.hstest.testing.TestRun.test(TestRun.java:87)\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:116)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\
    \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\
    \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\
    \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\
    \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\
    \tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\
    \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\
    \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\
    \tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\
    \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\
    \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\
    \tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\n\
    \tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\n\
    \tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\n\
    \tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\n\
    \tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\
    \tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\
    \tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\
    \tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:119)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\n\
    \tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\n\
    \tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:834)\njava.lang.NullPointerException\n\
    \tat AccountServiceTest.findCert(AccountServiceTest.java:70)\n\tat AccountServiceTest.checkCertificateName(AccountServiceTest.java:45)\n\
    \tat AccountServiceTest.lambda$new$0(AccountServiceTest.java:84)\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$null$2(DynamicTesting.java:289)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$null$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.test(SpringApplicationRunner.java:43)\n\
    \tat org.hyperskill.hstest.testing.TestRun.test(TestRun.java:87)\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:116)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\
    \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\
    \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\
    \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\
    \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\
    \tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\
    \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\
    \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\
    \tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\
    \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\
    \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\
    \tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\n\
    \tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\n\
    \tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\n\
    \tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\n\
    \tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\
    \tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\
    \tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\
    \tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:119)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\n\
    \tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\n\
    \tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:834)"
  time: Tue, 29 Mar 2022 05:45:31 UTC
record: 7
